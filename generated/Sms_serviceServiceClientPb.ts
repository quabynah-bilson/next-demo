/**
 * @fileoverview gRPC-Web generated client stub for sms
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: sms_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_pb from './common_pb';
import * as sms_pb from './sms_pb';


export class SmsServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorsend_otp = new grpcWeb.MethodDescriptor(
    '/sms.SmsService/send_otp',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.StringValue,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  send_otp(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  send_otp(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  send_otp(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/sms.SmsService/send_otp',
        request,
        metadata || {},
        this.methodDescriptorsend_otp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/sms.SmsService/send_otp',
    request,
    metadata || {},
    this.methodDescriptorsend_otp);
  }

  methodDescriptorverify_otp = new grpcWeb.MethodDescriptor(
    '/sms.SmsService/verify_otp',
    grpcWeb.MethodType.UNARY,
    sms_pb.VerifyOtpRequest,
    common_pb.Empty,
    (request: sms_pb.VerifyOtpRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  verify_otp(
    request: sms_pb.VerifyOtpRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  verify_otp(
    request: sms_pb.VerifyOtpRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  verify_otp(
    request: sms_pb.VerifyOtpRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/sms.SmsService/verify_otp',
        request,
        metadata || {},
        this.methodDescriptorverify_otp,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/sms.SmsService/verify_otp',
    request,
    metadata || {},
    this.methodDescriptorverify_otp);
  }

}

