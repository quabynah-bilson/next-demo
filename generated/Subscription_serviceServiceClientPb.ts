/**
 * @fileoverview gRPC-Web generated client stub for subscription
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: subscription_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as common_pb from './common_pb';
import * as subscription_pb from './subscription_pb';


export class SubscriptionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorsubscribe = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/subscribe',
    grpcWeb.MethodType.UNARY,
    subscription_pb.SubscriptionRequest,
    common_pb.StringValue,
    (request: subscription_pb.SubscriptionRequest) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  subscribe(
    request: subscription_pb.SubscriptionRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  subscribe(
    request: subscription_pb.SubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  subscribe(
    request: subscription_pb.SubscriptionRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/subscribe',
        request,
        metadata || {},
        this.methodDescriptorsubscribe,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/subscribe',
    request,
    metadata || {},
    this.methodDescriptorsubscribe);
  }

  methodDescriptorget_subscription_for_rider = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/get_subscription_for_rider',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    subscription_pb.Subscription,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    subscription_pb.Subscription.deserializeBinary
  );

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<subscription_pb.Subscription>;

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: subscription_pb.Subscription) => void): grpcWeb.ClientReadableStream<subscription_pb.Subscription>;

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: subscription_pb.Subscription) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/get_subscription_for_rider',
        request,
        metadata || {},
        this.methodDescriptorget_subscription_for_rider,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_for_rider',
    request,
    metadata || {},
    this.methodDescriptorget_subscription_for_rider);
  }

  methodDescriptorrevoke_subscription = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/revoke_subscription',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  revoke_subscription(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  revoke_subscription(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  revoke_subscription(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/revoke_subscription',
        request,
        metadata || {},
        this.methodDescriptorrevoke_subscription,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/revoke_subscription',
    request,
    metadata || {},
    this.methodDescriptorrevoke_subscription);
  }

  methodDescriptorget_subscriptions = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/get_subscriptions',
    grpcWeb.MethodType.UNARY,
    subscription_pb.GetSubscriptionsRequest,
    subscription_pb.SubscriptionList,
    (request: subscription_pb.GetSubscriptionsRequest) => {
      return request.serializeBinary();
    },
    subscription_pb.SubscriptionList.deserializeBinary
  );

  get_subscriptions(
    request: subscription_pb.GetSubscriptionsRequest,
    metadata: grpcWeb.Metadata | null): Promise<subscription_pb.SubscriptionList>;

  get_subscriptions(
    request: subscription_pb.GetSubscriptionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: subscription_pb.SubscriptionList) => void): grpcWeb.ClientReadableStream<subscription_pb.SubscriptionList>;

  get_subscriptions(
    request: subscription_pb.GetSubscriptionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: subscription_pb.SubscriptionList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/get_subscriptions',
        request,
        metadata || {},
        this.methodDescriptorget_subscriptions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/get_subscriptions',
    request,
    metadata || {},
    this.methodDescriptorget_subscriptions);
  }

  methodDescriptordelete_subscriptions_for_rider = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/delete_subscriptions_for_rider',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_subscriptions_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_subscriptions_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_subscriptions_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/delete_subscriptions_for_rider',
        request,
        metadata || {},
        this.methodDescriptordelete_subscriptions_for_rider,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/delete_subscriptions_for_rider',
    request,
    metadata || {},
    this.methodDescriptordelete_subscriptions_for_rider);
  }

  methodDescriptorget_riders_subscriptions = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/get_riders_subscriptions',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.Empty,
    subscription_pb.RiderSubscriptionPackageList,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    subscription_pb.RiderSubscriptionPackageList.deserializeBinary
  );

  get_riders_subscriptions(
    request: common_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<subscription_pb.RiderSubscriptionPackageList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/subscription.SubscriptionService/get_riders_subscriptions',
      request,
      metadata || {},
      this.methodDescriptorget_riders_subscriptions);
  }

  methodDescriptorget_subscription_packages = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/get_subscription_packages',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    subscription_pb.SubscriptionPackageList,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    subscription_pb.SubscriptionPackageList.deserializeBinary
  );

  get_subscription_packages(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<subscription_pb.SubscriptionPackageList>;

  get_subscription_packages(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: subscription_pb.SubscriptionPackageList) => void): grpcWeb.ClientReadableStream<subscription_pb.SubscriptionPackageList>;

  get_subscription_packages(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: subscription_pb.SubscriptionPackageList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/get_subscription_packages',
        request,
        metadata || {},
        this.methodDescriptorget_subscription_packages,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/get_subscription_packages',
    request,
    metadata || {},
    this.methodDescriptorget_subscription_packages);
  }

  methodDescriptorcreate_subscription_package = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/create_subscription_package',
    grpcWeb.MethodType.UNARY,
    subscription_pb.SubscriptionPackage,
    common_pb.Empty,
    (request: subscription_pb.SubscriptionPackage) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  create_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  create_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  create_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/create_subscription_package',
        request,
        metadata || {},
        this.methodDescriptorcreate_subscription_package,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/create_subscription_package',
    request,
    metadata || {},
    this.methodDescriptorcreate_subscription_package);
  }

  methodDescriptorupdate_subscription_package = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/update_subscription_package',
    grpcWeb.MethodType.UNARY,
    subscription_pb.SubscriptionPackage,
    common_pb.Empty,
    (request: subscription_pb.SubscriptionPackage) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  update_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  update_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  update_subscription_package(
    request: subscription_pb.SubscriptionPackage,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/update_subscription_package',
        request,
        metadata || {},
        this.methodDescriptorupdate_subscription_package,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/update_subscription_package',
    request,
    metadata || {},
    this.methodDescriptorupdate_subscription_package);
  }

  methodDescriptordelete_subscription_package = new grpcWeb.MethodDescriptor(
    '/subscription.SubscriptionService/delete_subscription_package',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_subscription_package(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_subscription_package(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_subscription_package(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/subscription.SubscriptionService/delete_subscription_package',
        request,
        metadata || {},
        this.methodDescriptordelete_subscription_package,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/subscription.SubscriptionService/delete_subscription_package',
    request,
    metadata || {},
    this.methodDescriptordelete_subscription_package);
  }

}

