/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: auth_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as auth_pb from './auth_pb';
import * as common_pb from './common_pb';


export class AuthenticationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorrequest_public_token = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/request_public_token',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    auth_pb.PublicTokenResponse,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.PublicTokenResponse.deserializeBinary
  );

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.PublicTokenResponse>;

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.PublicTokenResponse) => void): grpcWeb.ClientReadableStream<auth_pb.PublicTokenResponse>;

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.PublicTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/request_public_token',
        request,
        metadata || {},
        this.methodDescriptorrequest_public_token,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/request_public_token',
    request,
    metadata || {},
    this.methodDescriptorrequest_public_token);
  }

  methodDescriptorlogin = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/login',
    grpcWeb.MethodType.UNARY,
    auth_pb.LoginRequest,
    common_pb.StringValue,
    (request: auth_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  login(
    request: auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  login(
    request: auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  login(
    request: auth_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/login',
        request,
        metadata || {},
        this.methodDescriptorlogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/login',
    request,
    metadata || {},
    this.methodDescriptorlogin);
  }

  methodDescriptorlogout = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/logout',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.Empty,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/logout',
        request,
        metadata || {},
        this.methodDescriptorlogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/logout',
    request,
    metadata || {},
    this.methodDescriptorlogout);
  }

  methodDescriptorlogout_all = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/logout_all',
    grpcWeb.MethodType.UNARY,
    auth_pb.LogoutFromAllDevicesRequest,
    common_pb.Empty,
    (request: auth_pb.LogoutFromAllDevicesRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  logout_all(
    request: auth_pb.LogoutFromAllDevicesRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  logout_all(
    request: auth_pb.LogoutFromAllDevicesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  logout_all(
    request: auth_pb.LogoutFromAllDevicesRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/logout_all',
        request,
        metadata || {},
        this.methodDescriptorlogout_all,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/logout_all',
    request,
    metadata || {},
    this.methodDescriptorlogout_all);
  }

  methodDescriptorregister_user = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/register_user',
    grpcWeb.MethodType.UNARY,
    auth_pb.RegisterUserRequest,
    common_pb.StringValue,
    (request: auth_pb.RegisterUserRequest) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  register_user(
    request: auth_pb.RegisterUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  register_user(
    request: auth_pb.RegisterUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  register_user(
    request: auth_pb.RegisterUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/register_user',
        request,
        metadata || {},
        this.methodDescriptorregister_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/register_user',
    request,
    metadata || {},
    this.methodDescriptorregister_user);
  }

  methodDescriptorregister_rider = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/register_rider',
    grpcWeb.MethodType.UNARY,
    auth_pb.RegisterRiderRequest,
    common_pb.StringValue,
    (request: auth_pb.RegisterRiderRequest) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  register_rider(
    request: auth_pb.RegisterRiderRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  register_rider(
    request: auth_pb.RegisterRiderRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  register_rider(
    request: auth_pb.RegisterRiderRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/register_rider',
        request,
        metadata || {},
        this.methodDescriptorregister_rider,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/register_rider',
    request,
    metadata || {},
    this.methodDescriptorregister_rider);
  }

  methodDescriptorrefresh_user_token = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/refresh_user_token',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.StringValue,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  refresh_user_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  refresh_user_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  refresh_user_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/refresh_user_token',
        request,
        metadata || {},
        this.methodDescriptorrefresh_user_token,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/refresh_user_token',
    request,
    metadata || {},
    this.methodDescriptorrefresh_user_token);
  }

  methodDescriptorvalidate_token = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/validate_token',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.BoolValue,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.BoolValue.deserializeBinary
  );

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.BoolValue>;

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.BoolValue) => void): grpcWeb.ClientReadableStream<common_pb.BoolValue>;

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.BoolValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/validate_token',
        request,
        metadata || {},
        this.methodDescriptorvalidate_token,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/validate_token',
    request,
    metadata || {},
    this.methodDescriptorvalidate_token);
  }

  methodDescriptorget_current_user = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_current_user',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.Empty,
    auth_pb.CurrentUserResponse,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.CurrentUserResponse.deserializeBinary
  );

  get_current_user(
    request: common_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.CurrentUserResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthenticationService/get_current_user',
      request,
      metadata || {},
      this.methodDescriptorget_current_user);
  }

  methodDescriptorupdate_current_user = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/update_current_user',
    grpcWeb.MethodType.UNARY,
    auth_pb.UpdateCurrentUserRequest,
    auth_pb.UserAccount,
    (request: auth_pb.UpdateCurrentUserRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccount.deserializeBinary
  );

  update_current_user(
    request: auth_pb.UpdateCurrentUserRequest,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.UserAccount>;

  update_current_user(
    request: auth_pb.UpdateCurrentUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserAccount) => void): grpcWeb.ClientReadableStream<auth_pb.UserAccount>;

  update_current_user(
    request: auth_pb.UpdateCurrentUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserAccount) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/update_current_user',
        request,
        metadata || {},
        this.methodDescriptorupdate_current_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/update_current_user',
    request,
    metadata || {},
    this.methodDescriptorupdate_current_user);
  }

  methodDescriptorget_accounts_by_type = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_accounts_by_type',
    grpcWeb.MethodType.SERVER_STREAMING,
    auth_pb.GetAccountByTypeRequest,
    auth_pb.UserAccountList,
    (request: auth_pb.GetAccountByTypeRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccountList.deserializeBinary
  );

  get_accounts_by_type(
    request: auth_pb.GetAccountByTypeRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.UserAccountList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthenticationService/get_accounts_by_type',
      request,
      metadata || {},
      this.methodDescriptorget_accounts_by_type);
  }

  methodDescriptorget_accounts_by_status_and_type = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_accounts_by_status_and_type',
    grpcWeb.MethodType.SERVER_STREAMING,
    auth_pb.GetAccountsByStatusAndTypeRequest,
    auth_pb.UserAccountList,
    (request: auth_pb.GetAccountsByStatusAndTypeRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccountList.deserializeBinary
  );

  get_accounts_by_status_and_type(
    request: auth_pb.GetAccountsByStatusAndTypeRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.UserAccountList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthenticationService/get_accounts_by_status_and_type',
      request,
      metadata || {},
      this.methodDescriptorget_accounts_by_status_and_type);
  }

  methodDescriptorupdate_user_status = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/update_user_status',
    grpcWeb.MethodType.UNARY,
    auth_pb.UpdateAccountStatusRequest,
    common_pb.Empty,
    (request: auth_pb.UpdateAccountStatusRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/update_user_status',
        request,
        metadata || {},
        this.methodDescriptorupdate_user_status,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/update_user_status',
    request,
    metadata || {},
    this.methodDescriptorupdate_user_status);
  }

  methodDescriptorget_user_by_id = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_user_by_id',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.StringValue,
    auth_pb.UserAccount,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccount.deserializeBinary
  );

  get_user_by_id(
    request: common_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.UserAccount> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthenticationService/get_user_by_id',
      request,
      metadata || {},
      this.methodDescriptorget_user_by_id);
  }

  methodDescriptorget_user_by_phone_number = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_user_by_phone_number',
    grpcWeb.MethodType.UNARY,
    auth_pb.GetUserByPhoneNumberRequest,
    auth_pb.UserAccount,
    (request: auth_pb.GetUserByPhoneNumberRequest) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccount.deserializeBinary
  );

  get_user_by_phone_number(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.UserAccount>;

  get_user_by_phone_number(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.UserAccount) => void): grpcWeb.ClientReadableStream<auth_pb.UserAccount>;

  get_user_by_phone_number(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.UserAccount) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/get_user_by_phone_number',
        request,
        metadata || {},
        this.methodDescriptorget_user_by_phone_number,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/get_user_by_phone_number',
    request,
    metadata || {},
    this.methodDescriptorget_user_by_phone_number);
  }

  methodDescriptordelete_user = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/delete_user',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.Empty,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_user(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_user(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_user(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/delete_user',
        request,
        metadata || {},
        this.methodDescriptordelete_user,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/delete_user',
    request,
    metadata || {},
    this.methodDescriptordelete_user);
  }

  methodDescriptorcheck_user_exists = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/check_user_exists',
    grpcWeb.MethodType.UNARY,
    auth_pb.GetUserByPhoneNumberRequest,
    common_pb.Empty,
    (request: auth_pb.GetUserByPhoneNumberRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  check_user_exists(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  check_user_exists(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  check_user_exists(
    request: auth_pb.GetUserByPhoneNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/check_user_exists',
        request,
        metadata || {},
        this.methodDescriptorcheck_user_exists,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/check_user_exists',
    request,
    metadata || {},
    this.methodDescriptorcheck_user_exists);
  }

  methodDescriptorget_available_riders = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_available_riders',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.GeoPoint,
    auth_pb.AvailableRiderList,
    (request: common_pb.GeoPoint) => {
      return request.serializeBinary();
    },
    auth_pb.AvailableRiderList.deserializeBinary
  );

  get_available_riders(
    request: common_pb.GeoPoint,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.AvailableRiderList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/auth.AuthenticationService/get_available_riders',
      request,
      metadata || {},
      this.methodDescriptorget_available_riders);
  }

  methodDescriptorget_rider_stats = new grpcWeb.MethodDescriptor(
    '/auth.AuthenticationService/get_rider_stats',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    auth_pb.RiderStats,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.RiderStats.deserializeBinary
  );

  get_rider_stats(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.RiderStats>;

  get_rider_stats(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.RiderStats) => void): grpcWeb.ClientReadableStream<auth_pb.RiderStats>;

  get_rider_stats(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.RiderStats) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.AuthenticationService/get_rider_stats',
        request,
        metadata || {},
        this.methodDescriptorget_rider_stats,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.AuthenticationService/get_rider_stats',
    request,
    metadata || {},
    this.methodDescriptorget_rider_stats);
  }

}

export class ZoneServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorcreate_zone = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/create_zone',
    grpcWeb.MethodType.UNARY,
    auth_pb.CreateZoneRequest,
    common_pb.Empty,
    (request: auth_pb.CreateZoneRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  create_zone(
    request: auth_pb.CreateZoneRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  create_zone(
    request: auth_pb.CreateZoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  create_zone(
    request: auth_pb.CreateZoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/create_zone',
        request,
        metadata || {},
        this.methodDescriptorcreate_zone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/create_zone',
    request,
    metadata || {},
    this.methodDescriptorcreate_zone);
  }

  methodDescriptorget_zones_by_country = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/get_zones_by_country',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    auth_pb.ZoneList,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    auth_pb.ZoneList.deserializeBinary
  );

  get_zones_by_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.ZoneList>;

  get_zones_by_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.ZoneList) => void): grpcWeb.ClientReadableStream<auth_pb.ZoneList>;

  get_zones_by_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.ZoneList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/get_zones_by_country',
        request,
        metadata || {},
        this.methodDescriptorget_zones_by_country,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/get_zones_by_country',
    request,
    metadata || {},
    this.methodDescriptorget_zones_by_country);
  }

  methodDescriptorget_zone_by_id = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/get_zone_by_id',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    auth_pb.GetZoneResponse,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    auth_pb.GetZoneResponse.deserializeBinary
  );

  get_zone_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.GetZoneResponse>;

  get_zone_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.GetZoneResponse) => void): grpcWeb.ClientReadableStream<auth_pb.GetZoneResponse>;

  get_zone_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.GetZoneResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/get_zone_by_id',
        request,
        metadata || {},
        this.methodDescriptorget_zone_by_id,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/get_zone_by_id',
    request,
    metadata || {},
    this.methodDescriptorget_zone_by_id);
  }

  methodDescriptordelete_zone = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/delete_zone',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_zone(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_zone(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_zone(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/delete_zone',
        request,
        metadata || {},
        this.methodDescriptordelete_zone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/delete_zone',
    request,
    metadata || {},
    this.methodDescriptordelete_zone);
  }

  methodDescriptorupdate_zone = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/update_zone',
    grpcWeb.MethodType.UNARY,
    auth_pb.Zone,
    common_pb.Empty,
    (request: auth_pb.Zone) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  update_zone(
    request: auth_pb.Zone,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  update_zone(
    request: auth_pb.Zone,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  update_zone(
    request: auth_pb.Zone,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/update_zone',
        request,
        metadata || {},
        this.methodDescriptorupdate_zone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/update_zone',
    request,
    metadata || {},
    this.methodDescriptorupdate_zone);
  }

  methodDescriptoradd_rider_to_zone = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/add_rider_to_zone',
    grpcWeb.MethodType.UNARY,
    auth_pb.AddRiderToZoneRequest,
    common_pb.Empty,
    (request: auth_pb.AddRiderToZoneRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  add_rider_to_zone(
    request: auth_pb.AddRiderToZoneRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  add_rider_to_zone(
    request: auth_pb.AddRiderToZoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  add_rider_to_zone(
    request: auth_pb.AddRiderToZoneRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/add_rider_to_zone',
        request,
        metadata || {},
        this.methodDescriptoradd_rider_to_zone,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/add_rider_to_zone',
    request,
    metadata || {},
    this.methodDescriptoradd_rider_to_zone);
  }

  methodDescriptorcreate_section_head = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/create_section_head',
    grpcWeb.MethodType.UNARY,
    auth_pb.ZoneSectionHead,
    common_pb.Empty,
    (request: auth_pb.ZoneSectionHead) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  create_section_head(
    request: auth_pb.ZoneSectionHead,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  create_section_head(
    request: auth_pb.ZoneSectionHead,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  create_section_head(
    request: auth_pb.ZoneSectionHead,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/create_section_head',
        request,
        metadata || {},
        this.methodDescriptorcreate_section_head,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/create_section_head',
    request,
    metadata || {},
    this.methodDescriptorcreate_section_head);
  }

  methodDescriptorget_section_head_by_id = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/get_section_head_by_id',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    auth_pb.ZoneSectionHead,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    auth_pb.ZoneSectionHead.deserializeBinary
  );

  get_section_head_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.ZoneSectionHead>;

  get_section_head_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.ZoneSectionHead) => void): grpcWeb.ClientReadableStream<auth_pb.ZoneSectionHead>;

  get_section_head_by_id(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.ZoneSectionHead) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/get_section_head_by_id',
        request,
        metadata || {},
        this.methodDescriptorget_section_head_by_id,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/get_section_head_by_id',
    request,
    metadata || {},
    this.methodDescriptorget_section_head_by_id);
  }

  methodDescriptordelete_section_head = new grpcWeb.MethodDescriptor(
    '/auth.ZoneService/delete_section_head',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_section_head(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_section_head(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_section_head(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.ZoneService/delete_section_head',
        request,
        metadata || {},
        this.methodDescriptordelete_section_head,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.ZoneService/delete_section_head',
    request,
    metadata || {},
    this.methodDescriptordelete_section_head);
  }

}

export class CountryServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_countries = new grpcWeb.MethodDescriptor(
    '/auth.CountryService/get_countries',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    auth_pb.CountryList,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.CountryList.deserializeBinary
  );

  get_countries(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.CountryList>;

  get_countries(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.CountryList) => void): grpcWeb.ClientReadableStream<auth_pb.CountryList>;

  get_countries(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.CountryList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.CountryService/get_countries',
        request,
        metadata || {},
        this.methodDescriptorget_countries,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.CountryService/get_countries',
    request,
    metadata || {},
    this.methodDescriptorget_countries);
  }

  methodDescriptoradd_country = new grpcWeb.MethodDescriptor(
    '/auth.CountryService/add_country',
    grpcWeb.MethodType.UNARY,
    auth_pb.Country,
    common_pb.Empty,
    (request: auth_pb.Country) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  add_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  add_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  add_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.CountryService/add_country',
        request,
        metadata || {},
        this.methodDescriptoradd_country,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.CountryService/add_country',
    request,
    metadata || {},
    this.methodDescriptoradd_country);
  }

  methodDescriptorremove_country = new grpcWeb.MethodDescriptor(
    '/auth.CountryService/remove_country',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  remove_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  remove_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  remove_country(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.CountryService/remove_country',
        request,
        metadata || {},
        this.methodDescriptorremove_country,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.CountryService/remove_country',
    request,
    metadata || {},
    this.methodDescriptorremove_country);
  }

  methodDescriptorupdate_country = new grpcWeb.MethodDescriptor(
    '/auth.CountryService/update_country',
    grpcWeb.MethodType.UNARY,
    auth_pb.Country,
    common_pb.Empty,
    (request: auth_pb.Country) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  update_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  update_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  update_country(
    request: auth_pb.Country,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.CountryService/update_country',
        request,
        metadata || {},
        this.methodDescriptorupdate_country,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.CountryService/update_country',
    request,
    metadata || {},
    this.methodDescriptorupdate_country);
  }

  methodDescriptorget_country_by_dial_code = new grpcWeb.MethodDescriptor(
    '/auth.CountryService/get_country_by_dial_code',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    auth_pb.Country,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    auth_pb.Country.deserializeBinary
  );

  get_country_by_dial_code(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.Country>;

  get_country_by_dial_code(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.Country) => void): grpcWeb.ClientReadableStream<auth_pb.Country>;

  get_country_by_dial_code(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.Country) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.CountryService/get_country_by_dial_code',
        request,
        metadata || {},
        this.methodDescriptorget_country_by_dial_code,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.CountryService/get_country_by_dial_code',
    request,
    metadata || {},
    this.methodDescriptorget_country_by_dial_code);
  }

}

