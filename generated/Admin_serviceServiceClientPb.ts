/**
 * @fileoverview gRPC-Web generated client stub for admin
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.3
// source: admin_service.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as admin_pb from './admin_pb';
import * as auth_pb from './auth_pb';
import * as common_pb from './common_pb';
import * as order_pb from './order_pb';
import * as subscription_pb from './subscription_pb';


export class AdminAuthenticationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorrequest_public_token = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/request_public_token',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    auth_pb.PublicTokenResponse,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.PublicTokenResponse.deserializeBinary
  );

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<auth_pb.PublicTokenResponse>;

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: auth_pb.PublicTokenResponse) => void): grpcWeb.ClientReadableStream<auth_pb.PublicTokenResponse>;

  request_public_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: auth_pb.PublicTokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/request_public_token',
        request,
        metadata || {},
        this.methodDescriptorrequest_public_token,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/request_public_token',
    request,
    metadata || {},
    this.methodDescriptorrequest_public_token);
  }

  methodDescriptorlogin = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/login',
    grpcWeb.MethodType.UNARY,
    admin_pb.AdminLoginRequest,
    common_pb.StringValue,
    (request: admin_pb.AdminLoginRequest) => {
      return request.serializeBinary();
    },
    common_pb.StringValue.deserializeBinary
  );

  login(
    request: admin_pb.AdminLoginRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.StringValue>;

  login(
    request: admin_pb.AdminLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void): grpcWeb.ClientReadableStream<common_pb.StringValue>;

  login(
    request: admin_pb.AdminLoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.StringValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/login',
        request,
        metadata || {},
        this.methodDescriptorlogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/login',
    request,
    metadata || {},
    this.methodDescriptorlogin);
  }

  methodDescriptorlogout = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/logout',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.Empty,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  logout(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/logout',
        request,
        metadata || {},
        this.methodDescriptorlogout,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/logout',
    request,
    metadata || {},
    this.methodDescriptorlogout);
  }

  methodDescriptorchange_password = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/change_password',
    grpcWeb.MethodType.UNARY,
    admin_pb.AdminChangePasswordRequest,
    common_pb.Empty,
    (request: admin_pb.AdminChangePasswordRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  change_password(
    request: admin_pb.AdminChangePasswordRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  change_password(
    request: admin_pb.AdminChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  change_password(
    request: admin_pb.AdminChangePasswordRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/change_password',
        request,
        metadata || {},
        this.methodDescriptorchange_password,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/change_password',
    request,
    metadata || {},
    this.methodDescriptorchange_password);
  }

  methodDescriptorcreate_admin = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/create_admin',
    grpcWeb.MethodType.UNARY,
    admin_pb.AdminCreateRequest,
    common_pb.Empty,
    (request: admin_pb.AdminCreateRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  create_admin(
    request: admin_pb.AdminCreateRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  create_admin(
    request: admin_pb.AdminCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  create_admin(
    request: admin_pb.AdminCreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/create_admin',
        request,
        metadata || {},
        this.methodDescriptorcreate_admin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/create_admin',
    request,
    metadata || {},
    this.methodDescriptorcreate_admin);
  }

  methodDescriptordelete_admin = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/delete_admin',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    common_pb.Empty,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  delete_admin(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  delete_admin(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  delete_admin(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/delete_admin',
        request,
        metadata || {},
        this.methodDescriptordelete_admin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/delete_admin',
    request,
    metadata || {},
    this.methodDescriptordelete_admin);
  }

  methodDescriptorget_admins = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/get_admins',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.Empty,
    admin_pb.AdminList,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    admin_pb.AdminList.deserializeBinary
  );

  get_admins(
    request: common_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<admin_pb.AdminList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminAuthenticationService/get_admins',
      request,
      metadata || {},
      this.methodDescriptorget_admins);
  }

  methodDescriptorget_current_admin = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/get_current_admin',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    admin_pb.Admin,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    admin_pb.Admin.deserializeBinary
  );

  get_current_admin(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<admin_pb.Admin>;

  get_current_admin(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: admin_pb.Admin) => void): grpcWeb.ClientReadableStream<admin_pb.Admin>;

  get_current_admin(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: admin_pb.Admin) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/get_current_admin',
        request,
        metadata || {},
        this.methodDescriptorget_current_admin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/get_current_admin',
    request,
    metadata || {},
    this.methodDescriptorget_current_admin);
  }

  methodDescriptorvalidate_token = new grpcWeb.MethodDescriptor(
    '/admin.AdminAuthenticationService/validate_token',
    grpcWeb.MethodType.UNARY,
    common_pb.Empty,
    common_pb.BoolValue,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    common_pb.BoolValue.deserializeBinary
  );

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.BoolValue>;

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.BoolValue) => void): grpcWeb.ClientReadableStream<common_pb.BoolValue>;

  validate_token(
    request: common_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.BoolValue) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminAuthenticationService/validate_token',
        request,
        metadata || {},
        this.methodDescriptorvalidate_token,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminAuthenticationService/validate_token',
    request,
    metadata || {},
    this.methodDescriptorvalidate_token);
  }

}

export class AdminUserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_new_riders = new grpcWeb.MethodDescriptor(
    '/admin.AdminUserService/get_new_riders',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.Empty,
    auth_pb.UserAccountList,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    auth_pb.UserAccountList.deserializeBinary
  );

  get_new_riders(
    request: common_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<auth_pb.UserAccountList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminUserService/get_new_riders',
      request,
      metadata || {},
      this.methodDescriptorget_new_riders);
  }

  methodDescriptorget_riders = new grpcWeb.MethodDescriptor(
    '/admin.AdminUserService/get_riders',
    grpcWeb.MethodType.SERVER_STREAMING,
    admin_pb.GetAccountsRequest,
    admin_pb.RiderList,
    (request: admin_pb.GetAccountsRequest) => {
      return request.serializeBinary();
    },
    admin_pb.RiderList.deserializeBinary
  );

  get_riders(
    request: admin_pb.GetAccountsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<admin_pb.RiderList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminUserService/get_riders',
      request,
      metadata || {},
      this.methodDescriptorget_riders);
  }

  methodDescriptorget_customers = new grpcWeb.MethodDescriptor(
    '/admin.AdminUserService/get_customers',
    grpcWeb.MethodType.SERVER_STREAMING,
    admin_pb.GetAccountsRequest,
    admin_pb.CustomerList,
    (request: admin_pb.GetAccountsRequest) => {
      return request.serializeBinary();
    },
    admin_pb.CustomerList.deserializeBinary
  );

  get_customers(
    request: admin_pb.GetAccountsRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<admin_pb.CustomerList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminUserService/get_customers',
      request,
      metadata || {},
      this.methodDescriptorget_customers);
  }

  methodDescriptorupdate_user_status = new grpcWeb.MethodDescriptor(
    '/admin.AdminUserService/update_user_status',
    grpcWeb.MethodType.UNARY,
    auth_pb.UpdateAccountStatusRequest,
    common_pb.Empty,
    (request: auth_pb.UpdateAccountStatusRequest) => {
      return request.serializeBinary();
    },
    common_pb.Empty.deserializeBinary
  );

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null): Promise<common_pb.Empty>;

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void): grpcWeb.ClientReadableStream<common_pb.Empty>;

  update_user_status(
    request: auth_pb.UpdateAccountStatusRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: common_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminUserService/update_user_status',
        request,
        metadata || {},
        this.methodDescriptorupdate_user_status,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminUserService/update_user_status',
    request,
    metadata || {},
    this.methodDescriptorupdate_user_status);
  }

  methodDescriptorget_rider = new grpcWeb.MethodDescriptor(
    '/admin.AdminUserService/get_rider',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.StringValue,
    admin_pb.RiderDetails,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    admin_pb.RiderDetails.deserializeBinary
  );

  get_rider(
    request: common_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<admin_pb.RiderDetails> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminUserService/get_rider',
      request,
      metadata || {},
      this.methodDescriptorget_rider);
  }

}

export class AdminSubscriptionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_subscription_for_rider = new grpcWeb.MethodDescriptor(
    '/admin.AdminSubscriptionService/get_subscription_for_rider',
    grpcWeb.MethodType.UNARY,
    common_pb.StringValue,
    subscription_pb.Subscription,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    subscription_pb.Subscription.deserializeBinary
  );

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null): Promise<subscription_pb.Subscription>;

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: subscription_pb.Subscription) => void): grpcWeb.ClientReadableStream<subscription_pb.Subscription>;

  get_subscription_for_rider(
    request: common_pb.StringValue,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: subscription_pb.Subscription) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/admin.AdminSubscriptionService/get_subscription_for_rider',
        request,
        metadata || {},
        this.methodDescriptorget_subscription_for_rider,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/admin.AdminSubscriptionService/get_subscription_for_rider',
    request,
    metadata || {},
    this.methodDescriptorget_subscription_for_rider);
  }

}

export class AdminOrderServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_orders_for_rider = new grpcWeb.MethodDescriptor(
    '/admin.AdminOrderService/get_orders_for_rider',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.StringValue,
    order_pb.OrderList,
    (request: common_pb.StringValue) => {
      return request.serializeBinary();
    },
    order_pb.OrderList.deserializeBinary
  );

  get_orders_for_rider(
    request: common_pb.StringValue,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<order_pb.OrderList> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminOrderService/get_orders_for_rider',
      request,
      metadata || {},
      this.methodDescriptorget_orders_for_rider);
  }

}

export class AdminStatsServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorget_stats = new grpcWeb.MethodDescriptor(
    '/admin.AdminStatsService/get_stats',
    grpcWeb.MethodType.SERVER_STREAMING,
    common_pb.Empty,
    admin_pb.Stats,
    (request: common_pb.Empty) => {
      return request.serializeBinary();
    },
    admin_pb.Stats.deserializeBinary
  );

  get_stats(
    request: common_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<admin_pb.Stats> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/admin.AdminStatsService/get_stats',
      request,
      metadata || {},
      this.methodDescriptorget_stats);
  }

}

