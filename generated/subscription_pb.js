// source: subscription.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.subscription.GetSubscriptionsRequest', null, global);
goog.exportSymbol('proto.subscription.RiderSubscriptionPackageList', null, global);
goog.exportSymbol('proto.subscription.SubscribedPackageResponse', null, global);
goog.exportSymbol('proto.subscription.Subscription', null, global);
goog.exportSymbol('proto.subscription.SubscriptionList', null, global);
goog.exportSymbol('proto.subscription.SubscriptionNetworkCode', null, global);
goog.exportSymbol('proto.subscription.SubscriptionPackage', null, global);
goog.exportSymbol('proto.subscription.SubscriptionPackageList', null, global);
goog.exportSymbol('proto.subscription.SubscriptionRequest', null, global);
goog.exportSymbol('proto.subscription.SubscriptionRequest.SubscriptionPaymentMethodCase', null, global);
goog.exportSymbol('proto.subscription.SubscriptionStatus', null, global);
goog.exportSymbol('proto.subscription.SubscriptionWithCreditCard', null, global);
goog.exportSymbol('proto.subscription.SubscriptionWithMobileMoney', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.subscription.SubscriptionRequest.oneofGroups_);
};
goog.inherits(proto.subscription.SubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionRequest.displayName = 'proto.subscription.SubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionWithCreditCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.SubscriptionWithCreditCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionWithCreditCard.displayName = 'proto.subscription.SubscriptionWithCreditCard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionWithMobileMoney = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.SubscriptionWithMobileMoney, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionWithMobileMoney.displayName = 'proto.subscription.SubscriptionWithMobileMoney';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.Subscription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.Subscription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.Subscription.displayName = 'proto.subscription.Subscription';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription.SubscriptionList.repeatedFields_, null);
};
goog.inherits(proto.subscription.SubscriptionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionList.displayName = 'proto.subscription.SubscriptionList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionPackage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.SubscriptionPackage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionPackage.displayName = 'proto.subscription.SubscriptionPackage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscriptionPackageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription.SubscriptionPackageList.repeatedFields_, null);
};
goog.inherits(proto.subscription.SubscriptionPackageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscriptionPackageList.displayName = 'proto.subscription.SubscriptionPackageList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.SubscribedPackageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.SubscribedPackageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.SubscribedPackageResponse.displayName = 'proto.subscription.SubscribedPackageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.RiderSubscriptionPackageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.subscription.RiderSubscriptionPackageList.repeatedFields_, null);
};
goog.inherits(proto.subscription.RiderSubscriptionPackageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.RiderSubscriptionPackageList.displayName = 'proto.subscription.RiderSubscriptionPackageList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.subscription.GetSubscriptionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.subscription.GetSubscriptionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.subscription.GetSubscriptionsRequest.displayName = 'proto.subscription.GetSubscriptionsRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.subscription.SubscriptionRequest.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.subscription.SubscriptionRequest.SubscriptionPaymentMethodCase = {
  SUBSCRIPTION_PAYMENT_METHOD_NOT_SET: 0,
  CREDIT_CARD: 4,
  MOBILE_MONEY: 5
};

/**
 * @return {proto.subscription.SubscriptionRequest.SubscriptionPaymentMethodCase}
 */
proto.subscription.SubscriptionRequest.prototype.getSubscriptionPaymentMethodCase = function() {
  return /** @type {proto.subscription.SubscriptionRequest.SubscriptionPaymentMethodCase} */(jspb.Message.computeOneofCase(this, proto.subscription.SubscriptionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    days: jspb.Message.getFieldWithDefault(msg, 3, 0),
    creditCard: (f = msg.getCreditCard()) && proto.subscription.SubscriptionWithCreditCard.toObject(includeInstance, f),
    mobileMoney: (f = msg.getMobileMoney()) && proto.subscription.SubscriptionWithMobileMoney.toObject(includeInstance, f),
    recurring: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionRequest}
 */
proto.subscription.SubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionRequest;
  return proto.subscription.SubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionRequest}
 */
proto.subscription.SubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDays(value);
      break;
    case 4:
      var value = new proto.subscription.SubscriptionWithCreditCard;
      reader.readMessage(value,proto.subscription.SubscriptionWithCreditCard.deserializeBinaryFromReader);
      msg.setCreditCard(value);
      break;
    case 5:
      var value = new proto.subscription.SubscriptionWithMobileMoney;
      reader.readMessage(value,proto.subscription.SubscriptionWithMobileMoney.deserializeBinaryFromReader);
      msg.setMobileMoney(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecurring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDays();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCreditCard();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.subscription.SubscriptionWithCreditCard.serializeBinaryToWriter
    );
  }
  f = message.getMobileMoney();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.subscription.SubscriptionWithMobileMoney.serializeBinaryToWriter
    );
  }
  f = message.getRecurring();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.subscription.SubscriptionRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.subscription.SubscriptionRequest.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 days = 3;
 * @return {number}
 */
proto.subscription.SubscriptionRequest.prototype.getDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.setDays = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional SubscriptionWithCreditCard credit_card = 4;
 * @return {?proto.subscription.SubscriptionWithCreditCard}
 */
proto.subscription.SubscriptionRequest.prototype.getCreditCard = function() {
  return /** @type{?proto.subscription.SubscriptionWithCreditCard} */ (
    jspb.Message.getWrapperField(this, proto.subscription.SubscriptionWithCreditCard, 4));
};


/**
 * @param {?proto.subscription.SubscriptionWithCreditCard|undefined} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
*/
proto.subscription.SubscriptionRequest.prototype.setCreditCard = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.subscription.SubscriptionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.clearCreditCard = function() {
  return this.setCreditCard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription.SubscriptionRequest.prototype.hasCreditCard = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SubscriptionWithMobileMoney mobile_money = 5;
 * @return {?proto.subscription.SubscriptionWithMobileMoney}
 */
proto.subscription.SubscriptionRequest.prototype.getMobileMoney = function() {
  return /** @type{?proto.subscription.SubscriptionWithMobileMoney} */ (
    jspb.Message.getWrapperField(this, proto.subscription.SubscriptionWithMobileMoney, 5));
};


/**
 * @param {?proto.subscription.SubscriptionWithMobileMoney|undefined} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
*/
proto.subscription.SubscriptionRequest.prototype.setMobileMoney = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.subscription.SubscriptionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.clearMobileMoney = function() {
  return this.setMobileMoney(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription.SubscriptionRequest.prototype.hasMobileMoney = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool recurring = 6;
 * @return {boolean}
 */
proto.subscription.SubscriptionRequest.prototype.getRecurring = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.subscription.SubscriptionRequest} returns this
 */
proto.subscription.SubscriptionRequest.prototype.setRecurring = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionWithCreditCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionWithCreditCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionWithCreditCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardExpiryMonth: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cardExpiryYear: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cardCvv: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cardHolderName: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionWithCreditCard}
 */
proto.subscription.SubscriptionWithCreditCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionWithCreditCard;
  return proto.subscription.SubscriptionWithCreditCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionWithCreditCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionWithCreditCard}
 */
proto.subscription.SubscriptionWithCreditCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardExpiryMonth(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardExpiryYear(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardCvv(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardHolderName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionWithCreditCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionWithCreditCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionWithCreditCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardExpiryMonth();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCardExpiryYear();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCardCvv();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCardHolderName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string card_number = 1;
 * @return {string}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.getCardNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithCreditCard} returns this
 */
proto.subscription.SubscriptionWithCreditCard.prototype.setCardNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string card_expiry_month = 2;
 * @return {string}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.getCardExpiryMonth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithCreditCard} returns this
 */
proto.subscription.SubscriptionWithCreditCard.prototype.setCardExpiryMonth = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string card_expiry_year = 3;
 * @return {string}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.getCardExpiryYear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithCreditCard} returns this
 */
proto.subscription.SubscriptionWithCreditCard.prototype.setCardExpiryYear = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string card_cvv = 4;
 * @return {string}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.getCardCvv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithCreditCard} returns this
 */
proto.subscription.SubscriptionWithCreditCard.prototype.setCardCvv = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string card_holder_name = 5;
 * @return {string}
 */
proto.subscription.SubscriptionWithCreditCard.prototype.getCardHolderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithCreditCard} returns this
 */
proto.subscription.SubscriptionWithCreditCard.prototype.setCardHolderName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionWithMobileMoney.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionWithMobileMoney} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionWithMobileMoney.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionWithMobileMoney}
 */
proto.subscription.SubscriptionWithMobileMoney.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionWithMobileMoney;
  return proto.subscription.SubscriptionWithMobileMoney.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionWithMobileMoney} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionWithMobileMoney}
 */
proto.subscription.SubscriptionWithMobileMoney.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.subscription.SubscriptionNetworkCode} */ (reader.readEnum());
      msg.setNetwork(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionWithMobileMoney.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionWithMobileMoney} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionWithMobileMoney.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionWithMobileMoney} returns this
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SubscriptionNetworkCode network = 2;
 * @return {!proto.subscription.SubscriptionNetworkCode}
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.getNetwork = function() {
  return /** @type {!proto.subscription.SubscriptionNetworkCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.subscription.SubscriptionNetworkCode} value
 * @return {!proto.subscription.SubscriptionWithMobileMoney} returns this
 */
proto.subscription.SubscriptionWithMobileMoney.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.Subscription.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.Subscription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.Subscription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.Subscription.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 6, ""),
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    days: jspb.Message.getFieldWithDefault(msg, 3, 0),
    status: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expiryDate: (f = msg.getExpiryDate()) && common_pb.Timestamp.toObject(includeInstance, f),
    recurring: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    accountName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    accountNumber: jspb.Message.getFieldWithDefault(msg, 9, ""),
    createdAt: (f = msg.getCreatedAt()) && common_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.Subscription}
 */
proto.subscription.Subscription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.Subscription;
  return proto.subscription.Subscription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.Subscription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.Subscription}
 */
proto.subscription.Subscription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDays(value);
      break;
    case 4:
      var value = /** @type {!proto.subscription.SubscriptionStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 5:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setExpiryDate(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRecurring(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountNumber(value);
      break;
    case 10:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.Subscription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.Subscription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.Subscription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.Subscription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDays();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getExpiryDate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRecurring();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getAccountName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAccountNumber();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 6;
 * @return {string}
 */
proto.subscription.Subscription.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.subscription.Subscription.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string device_id = 2;
 * @return {string}
 */
proto.subscription.Subscription.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setDeviceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 days = 3;
 * @return {number}
 */
proto.subscription.Subscription.prototype.getDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setDays = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional SubscriptionStatus status = 4;
 * @return {!proto.subscription.SubscriptionStatus}
 */
proto.subscription.Subscription.prototype.getStatus = function() {
  return /** @type {!proto.subscription.SubscriptionStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.subscription.SubscriptionStatus} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional common.Timestamp expiry_date = 5;
 * @return {?proto.common.Timestamp}
 */
proto.subscription.Subscription.prototype.getExpiryDate = function() {
  return /** @type{?proto.common.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 5));
};


/**
 * @param {?proto.common.Timestamp|undefined} value
 * @return {!proto.subscription.Subscription} returns this
*/
proto.subscription.Subscription.prototype.setExpiryDate = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.clearExpiryDate = function() {
  return this.setExpiryDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription.Subscription.prototype.hasExpiryDate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool recurring = 7;
 * @return {boolean}
 */
proto.subscription.Subscription.prototype.getRecurring = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setRecurring = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string account_name = 8;
 * @return {string}
 */
proto.subscription.Subscription.prototype.getAccountName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setAccountName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string account_number = 9;
 * @return {string}
 */
proto.subscription.Subscription.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.setAccountNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional common.Timestamp created_at = 10;
 * @return {?proto.common.Timestamp}
 */
proto.subscription.Subscription.prototype.getCreatedAt = function() {
  return /** @type{?proto.common.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 10));
};


/**
 * @param {?proto.common.Timestamp|undefined} value
 * @return {!proto.subscription.Subscription} returns this
*/
proto.subscription.Subscription.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription.Subscription} returns this
 */
proto.subscription.Subscription.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription.Subscription.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription.SubscriptionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionList.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    subscriptionsList: jspb.Message.toObjectList(msg.getSubscriptionsList(),
    proto.subscription.Subscription.toObject, includeInstance),
    incomeFromSubscriptions: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionList}
 */
proto.subscription.SubscriptionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionList;
  return proto.subscription.SubscriptionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionList}
 */
proto.subscription.SubscriptionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.subscription.Subscription;
      reader.readMessage(value,proto.subscription.Subscription.deserializeBinaryFromReader);
      msg.addSubscriptions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIncomeFromSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.subscription.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getIncomeFromSubscriptions();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * repeated Subscription subscriptions = 1;
 * @return {!Array<!proto.subscription.Subscription>}
 */
proto.subscription.SubscriptionList.prototype.getSubscriptionsList = function() {
  return /** @type{!Array<!proto.subscription.Subscription>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription.Subscription, 1));
};


/**
 * @param {!Array<!proto.subscription.Subscription>} value
 * @return {!proto.subscription.SubscriptionList} returns this
*/
proto.subscription.SubscriptionList.prototype.setSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.subscription.Subscription=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription.Subscription}
 */
proto.subscription.SubscriptionList.prototype.addSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.subscription.Subscription, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription.SubscriptionList} returns this
 */
proto.subscription.SubscriptionList.prototype.clearSubscriptionsList = function() {
  return this.setSubscriptionsList([]);
};


/**
 * optional float income_from_subscriptions = 2;
 * @return {number}
 */
proto.subscription.SubscriptionList.prototype.getIncomeFromSubscriptions = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscriptionList} returns this
 */
proto.subscription.SubscriptionList.prototype.setIncomeFromSubscriptions = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionPackage.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionPackage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionPackage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionPackage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    days: jspb.Message.getFieldWithDefault(msg, 2, 0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dialCode: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionPackage}
 */
proto.subscription.SubscriptionPackage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionPackage;
  return proto.subscription.SubscriptionPackage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionPackage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionPackage}
 */
proto.subscription.SubscriptionPackage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDays(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionPackage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionPackage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionPackage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionPackage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDays();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDialCode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.subscription.SubscriptionPackage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionPackage} returns this
 */
proto.subscription.SubscriptionPackage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 days = 2;
 * @return {number}
 */
proto.subscription.SubscriptionPackage.prototype.getDays = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscriptionPackage} returns this
 */
proto.subscription.SubscriptionPackage.prototype.setDays = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float price = 3;
 * @return {number}
 */
proto.subscription.SubscriptionPackage.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscriptionPackage} returns this
 */
proto.subscription.SubscriptionPackage.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string dial_code = 4;
 * @return {string}
 */
proto.subscription.SubscriptionPackage.prototype.getDialCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.subscription.SubscriptionPackage} returns this
 */
proto.subscription.SubscriptionPackage.prototype.setDialCode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription.SubscriptionPackageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscriptionPackageList.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscriptionPackageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscriptionPackageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionPackageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    packagesList: jspb.Message.toObjectList(msg.getPackagesList(),
    proto.subscription.SubscriptionPackage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscriptionPackageList}
 */
proto.subscription.SubscriptionPackageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscriptionPackageList;
  return proto.subscription.SubscriptionPackageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscriptionPackageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscriptionPackageList}
 */
proto.subscription.SubscriptionPackageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.subscription.SubscriptionPackage;
      reader.readMessage(value,proto.subscription.SubscriptionPackage.deserializeBinaryFromReader);
      msg.addPackages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscriptionPackageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscriptionPackageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscriptionPackageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscriptionPackageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.subscription.SubscriptionPackage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubscriptionPackage packages = 1;
 * @return {!Array<!proto.subscription.SubscriptionPackage>}
 */
proto.subscription.SubscriptionPackageList.prototype.getPackagesList = function() {
  return /** @type{!Array<!proto.subscription.SubscriptionPackage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription.SubscriptionPackage, 1));
};


/**
 * @param {!Array<!proto.subscription.SubscriptionPackage>} value
 * @return {!proto.subscription.SubscriptionPackageList} returns this
*/
proto.subscription.SubscriptionPackageList.prototype.setPackagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.subscription.SubscriptionPackage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription.SubscriptionPackage}
 */
proto.subscription.SubscriptionPackageList.prototype.addPackages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.subscription.SubscriptionPackage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription.SubscriptionPackageList} returns this
 */
proto.subscription.SubscriptionPackageList.prototype.clearPackagesList = function() {
  return this.setPackagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.SubscribedPackageResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.SubscribedPackageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.SubscribedPackageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscribedPackageResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_package: (f = msg.getPackage()) && proto.subscription.SubscriptionPackage.toObject(includeInstance, f),
    ridersSubscribed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalSubscriptions: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.SubscribedPackageResponse}
 */
proto.subscription.SubscribedPackageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.SubscribedPackageResponse;
  return proto.subscription.SubscribedPackageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.SubscribedPackageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.SubscribedPackageResponse}
 */
proto.subscription.SubscribedPackageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.subscription.SubscriptionPackage;
      reader.readMessage(value,proto.subscription.SubscriptionPackage.deserializeBinaryFromReader);
      msg.setPackage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRidersSubscribed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.SubscribedPackageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.SubscribedPackageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.SubscribedPackageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.SubscribedPackageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.subscription.SubscriptionPackage.serializeBinaryToWriter
    );
  }
  f = message.getRidersSubscribed();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalSubscriptions();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional SubscriptionPackage package = 1;
 * @return {?proto.subscription.SubscriptionPackage}
 */
proto.subscription.SubscribedPackageResponse.prototype.getPackage = function() {
  return /** @type{?proto.subscription.SubscriptionPackage} */ (
    jspb.Message.getWrapperField(this, proto.subscription.SubscriptionPackage, 1));
};


/**
 * @param {?proto.subscription.SubscriptionPackage|undefined} value
 * @return {!proto.subscription.SubscribedPackageResponse} returns this
*/
proto.subscription.SubscribedPackageResponse.prototype.setPackage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.subscription.SubscribedPackageResponse} returns this
 */
proto.subscription.SubscribedPackageResponse.prototype.clearPackage = function() {
  return this.setPackage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.subscription.SubscribedPackageResponse.prototype.hasPackage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 riders_subscribed = 2;
 * @return {number}
 */
proto.subscription.SubscribedPackageResponse.prototype.getRidersSubscribed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscribedPackageResponse} returns this
 */
proto.subscription.SubscribedPackageResponse.prototype.setRidersSubscribed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 total_subscriptions = 3;
 * @return {number}
 */
proto.subscription.SubscribedPackageResponse.prototype.getTotalSubscriptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.subscription.SubscribedPackageResponse} returns this
 */
proto.subscription.SubscribedPackageResponse.prototype.setTotalSubscriptions = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.subscription.RiderSubscriptionPackageList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.RiderSubscriptionPackageList.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.RiderSubscriptionPackageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.RiderSubscriptionPackageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.RiderSubscriptionPackageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalSubscriptionsList: jspb.Message.toObjectList(msg.getTotalSubscriptionsList(),
    proto.subscription.SubscribedPackageResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.RiderSubscriptionPackageList}
 */
proto.subscription.RiderSubscriptionPackageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.RiderSubscriptionPackageList;
  return proto.subscription.RiderSubscriptionPackageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.RiderSubscriptionPackageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.RiderSubscriptionPackageList}
 */
proto.subscription.RiderSubscriptionPackageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.subscription.SubscribedPackageResponse;
      reader.readMessage(value,proto.subscription.SubscribedPackageResponse.deserializeBinaryFromReader);
      msg.addTotalSubscriptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.RiderSubscriptionPackageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.RiderSubscriptionPackageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.RiderSubscriptionPackageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.RiderSubscriptionPackageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.subscription.SubscribedPackageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SubscribedPackageResponse total_subscriptions = 1;
 * @return {!Array<!proto.subscription.SubscribedPackageResponse>}
 */
proto.subscription.RiderSubscriptionPackageList.prototype.getTotalSubscriptionsList = function() {
  return /** @type{!Array<!proto.subscription.SubscribedPackageResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.subscription.SubscribedPackageResponse, 1));
};


/**
 * @param {!Array<!proto.subscription.SubscribedPackageResponse>} value
 * @return {!proto.subscription.RiderSubscriptionPackageList} returns this
*/
proto.subscription.RiderSubscriptionPackageList.prototype.setTotalSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.subscription.SubscribedPackageResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription.SubscribedPackageResponse}
 */
proto.subscription.RiderSubscriptionPackageList.prototype.addTotalSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.subscription.SubscribedPackageResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.subscription.RiderSubscriptionPackageList} returns this
 */
proto.subscription.RiderSubscriptionPackageList.prototype.clearTotalSubscriptionsList = function() {
  return this.setTotalSubscriptionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.subscription.GetSubscriptionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.subscription.GetSubscriptionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.subscription.GetSubscriptionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.GetSubscriptionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateFilter: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.subscription.GetSubscriptionsRequest}
 */
proto.subscription.GetSubscriptionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.subscription.GetSubscriptionsRequest;
  return proto.subscription.GetSubscriptionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.subscription.GetSubscriptionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.subscription.GetSubscriptionsRequest}
 */
proto.subscription.GetSubscriptionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.DateFilter} */ (reader.readEnum());
      msg.setDateFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.subscription.GetSubscriptionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.subscription.GetSubscriptionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.subscription.GetSubscriptionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.subscription.GetSubscriptionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateFilter();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional common.DateFilter date_filter = 1;
 * @return {!proto.common.DateFilter}
 */
proto.subscription.GetSubscriptionsRequest.prototype.getDateFilter = function() {
  return /** @type {!proto.common.DateFilter} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.DateFilter} value
 * @return {!proto.subscription.GetSubscriptionsRequest} returns this
 */
proto.subscription.GetSubscriptionsRequest.prototype.setDateFilter = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.subscription.SubscriptionNetworkCode = {
  MTN: 0,
  VODAFONE: 1,
  AIRTELTIGO: 2
};

/**
 * @enum {number}
 */
proto.subscription.SubscriptionStatus = {
  ACTIVE: 0,
  EXPIRED: 1,
  CANCELLED: 2
};

goog.object.extend(exports, proto.subscription);
