// source: admin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var auth_pb = require('./auth_pb.js');
goog.object.extend(proto, auth_pb);
var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var subscription_pb = require('./subscription_pb.js');
goog.object.extend(proto, subscription_pb);
goog.exportSymbol('proto.admin.Admin', null, global);
goog.exportSymbol('proto.admin.AdminChangePasswordRequest', null, global);
goog.exportSymbol('proto.admin.AdminCreateRequest', null, global);
goog.exportSymbol('proto.admin.AdminList', null, global);
goog.exportSymbol('proto.admin.AdminLoginRequest', null, global);
goog.exportSymbol('proto.admin.AdminType', null, global);
goog.exportSymbol('proto.admin.CustomerList', null, global);
goog.exportSymbol('proto.admin.FeatureIncomeResponse', null, global);
goog.exportSymbol('proto.admin.GetAccountsRequest', null, global);
goog.exportSymbol('proto.admin.PasswordStore', null, global);
goog.exportSymbol('proto.admin.Rider', null, global);
goog.exportSymbol('proto.admin.RiderDetails', null, global);
goog.exportSymbol('proto.admin.RiderList', null, global);
goog.exportSymbol('proto.admin.Stats', null, global);
goog.exportSymbol('proto.admin.UpdateSubscriptionRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.AdminLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.AdminLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.AdminLoginRequest.displayName = 'proto.admin.AdminLoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.AdminChangePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.AdminChangePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.AdminChangePasswordRequest.displayName = 'proto.admin.AdminChangePasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.AdminList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.admin.AdminList.repeatedFields_, null);
};
goog.inherits(proto.admin.AdminList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.AdminList.displayName = 'proto.admin.AdminList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.Admin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.Admin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.Admin.displayName = 'proto.admin.Admin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.AdminCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.AdminCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.AdminCreateRequest.displayName = 'proto.admin.AdminCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.RiderList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.admin.RiderList.repeatedFields_, null);
};
goog.inherits(proto.admin.RiderList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.RiderList.displayName = 'proto.admin.RiderList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.CustomerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.admin.CustomerList.repeatedFields_, null);
};
goog.inherits(proto.admin.CustomerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.CustomerList.displayName = 'proto.admin.CustomerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.GetAccountsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.GetAccountsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.GetAccountsRequest.displayName = 'proto.admin.GetAccountsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.Rider = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.Rider, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.Rider.displayName = 'proto.admin.Rider';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.UpdateSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.UpdateSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.UpdateSubscriptionRequest.displayName = 'proto.admin.UpdateSubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.RiderDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.RiderDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.RiderDetails.displayName = 'proto.admin.RiderDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.PasswordStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.PasswordStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.PasswordStore.displayName = 'proto.admin.PasswordStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.admin.Stats.repeatedFields_, null);
};
goog.inherits(proto.admin.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.Stats.displayName = 'proto.admin.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.admin.FeatureIncomeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.admin.FeatureIncomeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.admin.FeatureIncomeResponse.displayName = 'proto.admin.FeatureIncomeResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.AdminLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.AdminLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.AdminLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rememberMe: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.AdminLoginRequest}
 */
proto.admin.AdminLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.AdminLoginRequest;
  return proto.admin.AdminLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.AdminLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.AdminLoginRequest}
 */
proto.admin.AdminLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRememberMe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.AdminLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.AdminLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.AdminLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRememberMe();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.admin.AdminLoginRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminLoginRequest} returns this
 */
proto.admin.AdminLoginRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.AdminLoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminLoginRequest} returns this
 */
proto.admin.AdminLoginRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool remember_me = 3;
 * @return {boolean}
 */
proto.admin.AdminLoginRequest.prototype.getRememberMe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.admin.AdminLoginRequest} returns this
 */
proto.admin.AdminLoginRequest.prototype.setRememberMe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.AdminChangePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.AdminChangePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.AdminChangePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminChangePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldPassword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.AdminChangePasswordRequest}
 */
proto.admin.AdminChangePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.AdminChangePasswordRequest;
  return proto.admin.AdminChangePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.AdminChangePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.AdminChangePasswordRequest}
 */
proto.admin.AdminChangePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.AdminChangePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.AdminChangePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.AdminChangePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminChangePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOldPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string old_password = 1;
 * @return {string}
 */
proto.admin.AdminChangePasswordRequest.prototype.getOldPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminChangePasswordRequest} returns this
 */
proto.admin.AdminChangePasswordRequest.prototype.setOldPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_password = 2;
 * @return {string}
 */
proto.admin.AdminChangePasswordRequest.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminChangePasswordRequest} returns this
 */
proto.admin.AdminChangePasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.AdminList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.AdminList.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.AdminList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.AdminList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminList.toObject = function(includeInstance, msg) {
  var f, obj = {
    adminsList: jspb.Message.toObjectList(msg.getAdminsList(),
    proto.admin.Admin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.AdminList}
 */
proto.admin.AdminList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.AdminList;
  return proto.admin.AdminList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.AdminList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.AdminList}
 */
proto.admin.AdminList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.admin.Admin;
      reader.readMessage(value,proto.admin.Admin.deserializeBinaryFromReader);
      msg.addAdmins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.AdminList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.AdminList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.AdminList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdminsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.admin.Admin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Admin admins = 1;
 * @return {!Array<!proto.admin.Admin>}
 */
proto.admin.AdminList.prototype.getAdminsList = function() {
  return /** @type{!Array<!proto.admin.Admin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.admin.Admin, 1));
};


/**
 * @param {!Array<!proto.admin.Admin>} value
 * @return {!proto.admin.AdminList} returns this
*/
proto.admin.AdminList.prototype.setAdminsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.admin.Admin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.admin.Admin}
 */
proto.admin.AdminList.prototype.addAdmins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.admin.Admin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.AdminList} returns this
 */
proto.admin.AdminList.prototype.clearAdminsList = function() {
  return this.setAdminsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.Admin.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.Admin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.Admin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Admin.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 4, ""),
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    adminType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fullName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dialCode: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.Admin}
 */
proto.admin.Admin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.Admin;
  return proto.admin.Admin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.Admin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.Admin}
 */
proto.admin.Admin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {!proto.admin.AdminType} */ (reader.readEnum());
      msg.setAdminType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.Admin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.Admin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.Admin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Admin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAdminType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDialCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.admin.Admin.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.Admin} returns this
 */
proto.admin.Admin.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.admin.Admin.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.Admin} returns this
 */
proto.admin.Admin.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AdminType admin_type = 2;
 * @return {!proto.admin.AdminType}
 */
proto.admin.Admin.prototype.getAdminType = function() {
  return /** @type {!proto.admin.AdminType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.admin.AdminType} value
 * @return {!proto.admin.Admin} returns this
 */
proto.admin.Admin.prototype.setAdminType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string full_name = 3;
 * @return {string}
 */
proto.admin.Admin.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.Admin} returns this
 */
proto.admin.Admin.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string dial_code = 5;
 * @return {string}
 */
proto.admin.Admin.prototype.getDialCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.Admin} returns this
 */
proto.admin.Admin.prototype.setDialCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.AdminCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.AdminCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.AdminCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    adminType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fullName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dialCode: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.AdminCreateRequest}
 */
proto.admin.AdminCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.AdminCreateRequest;
  return proto.admin.AdminCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.AdminCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.AdminCreateRequest}
 */
proto.admin.AdminCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {!proto.admin.AdminType} */ (reader.readEnum());
      msg.setAdminType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDialCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.AdminCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.AdminCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.AdminCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.AdminCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdminType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDialCode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.admin.AdminCreateRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminCreateRequest} returns this
 */
proto.admin.AdminCreateRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.AdminCreateRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminCreateRequest} returns this
 */
proto.admin.AdminCreateRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AdminType admin_type = 3;
 * @return {!proto.admin.AdminType}
 */
proto.admin.AdminCreateRequest.prototype.getAdminType = function() {
  return /** @type {!proto.admin.AdminType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.admin.AdminType} value
 * @return {!proto.admin.AdminCreateRequest} returns this
 */
proto.admin.AdminCreateRequest.prototype.setAdminType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string full_name = 4;
 * @return {string}
 */
proto.admin.AdminCreateRequest.prototype.getFullName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminCreateRequest} returns this
 */
proto.admin.AdminCreateRequest.prototype.setFullName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string dial_code = 5;
 * @return {string}
 */
proto.admin.AdminCreateRequest.prototype.getDialCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.AdminCreateRequest} returns this
 */
proto.admin.AdminCreateRequest.prototype.setDialCode = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.RiderList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.RiderList.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.RiderList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.RiderList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.RiderList.toObject = function(includeInstance, msg) {
  var f, obj = {
    ridersList: jspb.Message.toObjectList(msg.getRidersList(),
    proto.admin.Rider.toObject, includeInstance),
    activeRiders: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalRiders: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalOfflineRiders: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.RiderList}
 */
proto.admin.RiderList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.RiderList;
  return proto.admin.RiderList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.RiderList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.RiderList}
 */
proto.admin.RiderList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.admin.Rider;
      reader.readMessage(value,proto.admin.Rider.deserializeBinaryFromReader);
      msg.addRiders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveRiders(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalRiders(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalOfflineRiders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.RiderList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.RiderList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.RiderList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.RiderList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.admin.Rider.serializeBinaryToWriter
    );
  }
  f = message.getActiveRiders();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalRiders();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalOfflineRiders();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * repeated Rider riders = 1;
 * @return {!Array<!proto.admin.Rider>}
 */
proto.admin.RiderList.prototype.getRidersList = function() {
  return /** @type{!Array<!proto.admin.Rider>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.admin.Rider, 1));
};


/**
 * @param {!Array<!proto.admin.Rider>} value
 * @return {!proto.admin.RiderList} returns this
*/
proto.admin.RiderList.prototype.setRidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.admin.Rider=} opt_value
 * @param {number=} opt_index
 * @return {!proto.admin.Rider}
 */
proto.admin.RiderList.prototype.addRiders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.admin.Rider, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.RiderList} returns this
 */
proto.admin.RiderList.prototype.clearRidersList = function() {
  return this.setRidersList([]);
};


/**
 * optional int32 active_riders = 2;
 * @return {number}
 */
proto.admin.RiderList.prototype.getActiveRiders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderList} returns this
 */
proto.admin.RiderList.prototype.setActiveRiders = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 total_riders = 3;
 * @return {number}
 */
proto.admin.RiderList.prototype.getTotalRiders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderList} returns this
 */
proto.admin.RiderList.prototype.setTotalRiders = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 total_offline_riders = 4;
 * @return {number}
 */
proto.admin.RiderList.prototype.getTotalOfflineRiders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderList} returns this
 */
proto.admin.RiderList.prototype.setTotalOfflineRiders = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.CustomerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.CustomerList.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.CustomerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.CustomerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.CustomerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    customersList: jspb.Message.toObjectList(msg.getCustomersList(),
    auth_pb.UserAccount.toObject, includeInstance),
    activeCustomers: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalCustomers: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.CustomerList}
 */
proto.admin.CustomerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.CustomerList;
  return proto.admin.CustomerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.CustomerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.CustomerList}
 */
proto.admin.CustomerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_pb.UserAccount;
      reader.readMessage(value,auth_pb.UserAccount.deserializeBinaryFromReader);
      msg.addCustomers(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveCustomers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCustomers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.CustomerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.CustomerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.CustomerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.CustomerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCustomersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      auth_pb.UserAccount.serializeBinaryToWriter
    );
  }
  f = message.getActiveCustomers();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalCustomers();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated auth.UserAccount customers = 1;
 * @return {!Array<!proto.auth.UserAccount>}
 */
proto.admin.CustomerList.prototype.getCustomersList = function() {
  return /** @type{!Array<!proto.auth.UserAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, auth_pb.UserAccount, 1));
};


/**
 * @param {!Array<!proto.auth.UserAccount>} value
 * @return {!proto.admin.CustomerList} returns this
*/
proto.admin.CustomerList.prototype.setCustomersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.auth.UserAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.auth.UserAccount}
 */
proto.admin.CustomerList.prototype.addCustomers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.auth.UserAccount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.CustomerList} returns this
 */
proto.admin.CustomerList.prototype.clearCustomersList = function() {
  return this.setCustomersList([]);
};


/**
 * optional int32 active_customers = 2;
 * @return {number}
 */
proto.admin.CustomerList.prototype.getActiveCustomers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.CustomerList} returns this
 */
proto.admin.CustomerList.prototype.setActiveCustomers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 total_customers = 3;
 * @return {number}
 */
proto.admin.CustomerList.prototype.getTotalCustomers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.CustomerList} returns this
 */
proto.admin.CustomerList.prototype.setTotalCustomers = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.GetAccountsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.GetAccountsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.GetAccountsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetAccountsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.GetAccountsRequest}
 */
proto.admin.GetAccountsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.GetAccountsRequest;
  return proto.admin.GetAccountsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.GetAccountsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.GetAccountsRequest}
 */
proto.admin.GetAccountsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    case 3:
      var value = /** @type {!proto.auth.AccountStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.GetAccountsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.GetAccountsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.GetAccountsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.GetAccountsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.admin.GetAccountsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.GetAccountsRequest} returns this
 */
proto.admin.GetAccountsRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.admin.GetAccountsRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.GetAccountsRequest} returns this
 */
proto.admin.GetAccountsRequest.prototype.setPageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional auth.AccountStatus status = 3;
 * @return {!proto.auth.AccountStatus}
 */
proto.admin.GetAccountsRequest.prototype.getStatus = function() {
  return /** @type {!proto.auth.AccountStatus} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.auth.AccountStatus} value
 * @return {!proto.admin.GetAccountsRequest} returns this
 */
proto.admin.GetAccountsRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.Rider.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.Rider.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.Rider} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Rider.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && auth_pb.UserAccount.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && subscription_pb.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.Rider}
 */
proto.admin.Rider.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.Rider;
  return proto.admin.Rider.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.Rider} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.Rider}
 */
proto.admin.Rider.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_pb.UserAccount;
      reader.readMessage(value,auth_pb.UserAccount.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new subscription_pb.Subscription;
      reader.readMessage(value,subscription_pb.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.Rider.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.Rider.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.Rider} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Rider.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_pb.UserAccount.serializeBinaryToWriter
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      subscription_pb.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional auth.UserAccount account = 1;
 * @return {?proto.auth.UserAccount}
 */
proto.admin.Rider.prototype.getAccount = function() {
  return /** @type{?proto.auth.UserAccount} */ (
    jspb.Message.getWrapperField(this, auth_pb.UserAccount, 1));
};


/**
 * @param {?proto.auth.UserAccount|undefined} value
 * @return {!proto.admin.Rider} returns this
*/
proto.admin.Rider.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.Rider} returns this
 */
proto.admin.Rider.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.Rider.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional subscription.Subscription subscription = 2;
 * @return {?proto.subscription.Subscription}
 */
proto.admin.Rider.prototype.getSubscription = function() {
  return /** @type{?proto.subscription.Subscription} */ (
    jspb.Message.getWrapperField(this, subscription_pb.Subscription, 2));
};


/**
 * @param {?proto.subscription.Subscription|undefined} value
 * @return {!proto.admin.Rider} returns this
*/
proto.admin.Rider.prototype.setSubscription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.Rider} returns this
 */
proto.admin.Rider.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.Rider.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.UpdateSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.UpdateSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.UpdateSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneNumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscription: (f = msg.getSubscription()) && subscription_pb.Subscription.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.UpdateSubscriptionRequest}
 */
proto.admin.UpdateSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.UpdateSubscriptionRequest;
  return proto.admin.UpdateSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.UpdateSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.UpdateSubscriptionRequest}
 */
proto.admin.UpdateSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneNumber(value);
      break;
    case 2:
      var value = new subscription_pb.Subscription;
      reader.readMessage(value,subscription_pb.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.UpdateSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.UpdateSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.UpdateSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.UpdateSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      subscription_pb.Subscription.serializeBinaryToWriter
    );
  }
};


/**
 * optional string phone_number = 1;
 * @return {string}
 */
proto.admin.UpdateSubscriptionRequest.prototype.getPhoneNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.UpdateSubscriptionRequest} returns this
 */
proto.admin.UpdateSubscriptionRequest.prototype.setPhoneNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional subscription.Subscription subscription = 2;
 * @return {?proto.subscription.Subscription}
 */
proto.admin.UpdateSubscriptionRequest.prototype.getSubscription = function() {
  return /** @type{?proto.subscription.Subscription} */ (
    jspb.Message.getWrapperField(this, subscription_pb.Subscription, 2));
};


/**
 * @param {?proto.subscription.Subscription|undefined} value
 * @return {!proto.admin.UpdateSubscriptionRequest} returns this
*/
proto.admin.UpdateSubscriptionRequest.prototype.setSubscription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.UpdateSubscriptionRequest} returns this
 */
proto.admin.UpdateSubscriptionRequest.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.UpdateSubscriptionRequest.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.RiderDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.RiderDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.RiderDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.RiderDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && auth_pb.UserAccount.toObject(includeInstance, f),
    subscription: (f = msg.getSubscription()) && subscription_pb.Subscription.toObject(includeInstance, f),
    totalRides: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalRevenue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    totalCancelledRides: jspb.Message.getFieldWithDefault(msg, 5, 0),
    zone: (f = msg.getZone()) && auth_pb.Zone.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.RiderDetails}
 */
proto.admin.RiderDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.RiderDetails;
  return proto.admin.RiderDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.RiderDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.RiderDetails}
 */
proto.admin.RiderDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new auth_pb.UserAccount;
      reader.readMessage(value,auth_pb.UserAccount.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = new subscription_pb.Subscription;
      reader.readMessage(value,subscription_pb.Subscription.deserializeBinaryFromReader);
      msg.setSubscription(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalRides(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalRevenue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCancelledRides(value);
      break;
    case 6:
      var value = new auth_pb.Zone;
      reader.readMessage(value,auth_pb.Zone.deserializeBinaryFromReader);
      msg.setZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.RiderDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.RiderDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.RiderDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.RiderDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      auth_pb.UserAccount.serializeBinaryToWriter
    );
  }
  f = message.getSubscription();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      subscription_pb.Subscription.serializeBinaryToWriter
    );
  }
  f = message.getTotalRides();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalRevenue();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTotalCancelledRides();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getZone();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      auth_pb.Zone.serializeBinaryToWriter
    );
  }
};


/**
 * optional auth.UserAccount account = 1;
 * @return {?proto.auth.UserAccount}
 */
proto.admin.RiderDetails.prototype.getAccount = function() {
  return /** @type{?proto.auth.UserAccount} */ (
    jspb.Message.getWrapperField(this, auth_pb.UserAccount, 1));
};


/**
 * @param {?proto.auth.UserAccount|undefined} value
 * @return {!proto.admin.RiderDetails} returns this
*/
proto.admin.RiderDetails.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.RiderDetails.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional subscription.Subscription subscription = 2;
 * @return {?proto.subscription.Subscription}
 */
proto.admin.RiderDetails.prototype.getSubscription = function() {
  return /** @type{?proto.subscription.Subscription} */ (
    jspb.Message.getWrapperField(this, subscription_pb.Subscription, 2));
};


/**
 * @param {?proto.subscription.Subscription|undefined} value
 * @return {!proto.admin.RiderDetails} returns this
*/
proto.admin.RiderDetails.prototype.setSubscription = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.clearSubscription = function() {
  return this.setSubscription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.RiderDetails.prototype.hasSubscription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 total_rides = 3;
 * @return {number}
 */
proto.admin.RiderDetails.prototype.getTotalRides = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.setTotalRides = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float total_revenue = 4;
 * @return {number}
 */
proto.admin.RiderDetails.prototype.getTotalRevenue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.setTotalRevenue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 total_cancelled_rides = 5;
 * @return {number}
 */
proto.admin.RiderDetails.prototype.getTotalCancelledRides = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.setTotalCancelledRides = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional auth.Zone zone = 6;
 * @return {?proto.auth.Zone}
 */
proto.admin.RiderDetails.prototype.getZone = function() {
  return /** @type{?proto.auth.Zone} */ (
    jspb.Message.getWrapperField(this, auth_pb.Zone, 6));
};


/**
 * @param {?proto.auth.Zone|undefined} value
 * @return {!proto.admin.RiderDetails} returns this
*/
proto.admin.RiderDetails.prototype.setZone = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.RiderDetails} returns this
 */
proto.admin.RiderDetails.prototype.clearZone = function() {
  return this.setZone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.RiderDetails.prototype.hasZone = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.PasswordStore.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.PasswordStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.PasswordStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.PasswordStore.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdAt: (f = msg.getCreatedAt()) && common_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.PasswordStore}
 */
proto.admin.PasswordStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.PasswordStore;
  return proto.admin.PasswordStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.PasswordStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.PasswordStore}
 */
proto.admin.PasswordStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.PasswordStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.PasswordStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.PasswordStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.PasswordStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.admin.PasswordStore.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.PasswordStore} returns this
 */
proto.admin.PasswordStore.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.admin.PasswordStore.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.PasswordStore} returns this
 */
proto.admin.PasswordStore.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional common.Timestamp created_at = 3;
 * @return {?proto.common.Timestamp}
 */
proto.admin.PasswordStore.prototype.getCreatedAt = function() {
  return /** @type{?proto.common.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 3));
};


/**
 * @param {?proto.common.Timestamp|undefined} value
 * @return {!proto.admin.PasswordStore} returns this
*/
proto.admin.PasswordStore.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.PasswordStore} returns this
 */
proto.admin.PasswordStore.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.PasswordStore.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.admin.Stats.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalOrders: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalCustomers: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalRiders: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalCarRentals: jspb.Message.getFieldWithDefault(msg, 8, 0),
    totalSubscriptionsList: jspb.Message.toObjectList(msg.getTotalSubscriptionsList(),
    subscription_pb.SubscribedPackageResponse.toObject, includeInstance),
    incomeFromSubscriptions: (f = msg.getIncomeFromSubscriptions()) && proto.admin.FeatureIncomeResponse.toObject(includeInstance, f),
    incomeFromCarRentals: (f = msg.getIncomeFromCarRentals()) && proto.admin.FeatureIncomeResponse.toObject(includeInstance, f),
    deliveryFees: (f = msg.getDeliveryFees()) && proto.admin.FeatureIncomeResponse.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.Stats}
 */
proto.admin.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.Stats;
  return proto.admin.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.Stats}
 */
proto.admin.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalOrders(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCustomers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalRiders(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalCarRentals(value);
      break;
    case 4:
      var value = new subscription_pb.SubscribedPackageResponse;
      reader.readMessage(value,subscription_pb.SubscribedPackageResponse.deserializeBinaryFromReader);
      msg.addTotalSubscriptions(value);
      break;
    case 5:
      var value = new proto.admin.FeatureIncomeResponse;
      reader.readMessage(value,proto.admin.FeatureIncomeResponse.deserializeBinaryFromReader);
      msg.setIncomeFromSubscriptions(value);
      break;
    case 6:
      var value = new proto.admin.FeatureIncomeResponse;
      reader.readMessage(value,proto.admin.FeatureIncomeResponse.deserializeBinaryFromReader);
      msg.setIncomeFromCarRentals(value);
      break;
    case 7:
      var value = new proto.admin.FeatureIncomeResponse;
      reader.readMessage(value,proto.admin.FeatureIncomeResponse.deserializeBinaryFromReader);
      msg.setDeliveryFees(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalOrders();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTotalCustomers();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTotalRiders();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalCarRentals();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTotalSubscriptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      subscription_pb.SubscribedPackageResponse.serializeBinaryToWriter
    );
  }
  f = message.getIncomeFromSubscriptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.admin.FeatureIncomeResponse.serializeBinaryToWriter
    );
  }
  f = message.getIncomeFromCarRentals();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.admin.FeatureIncomeResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeliveryFees();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.admin.FeatureIncomeResponse.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 total_orders = 1;
 * @return {number}
 */
proto.admin.Stats.prototype.getTotalOrders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.setTotalOrders = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 total_customers = 2;
 * @return {number}
 */
proto.admin.Stats.prototype.getTotalCustomers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.setTotalCustomers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 total_riders = 3;
 * @return {number}
 */
proto.admin.Stats.prototype.getTotalRiders = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.setTotalRiders = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 total_car_rentals = 8;
 * @return {number}
 */
proto.admin.Stats.prototype.getTotalCarRentals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.setTotalCarRentals = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * repeated subscription.SubscribedPackageResponse total_subscriptions = 4;
 * @return {!Array<!proto.subscription.SubscribedPackageResponse>}
 */
proto.admin.Stats.prototype.getTotalSubscriptionsList = function() {
  return /** @type{!Array<!proto.subscription.SubscribedPackageResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, subscription_pb.SubscribedPackageResponse, 4));
};


/**
 * @param {!Array<!proto.subscription.SubscribedPackageResponse>} value
 * @return {!proto.admin.Stats} returns this
*/
proto.admin.Stats.prototype.setTotalSubscriptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.subscription.SubscribedPackageResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.subscription.SubscribedPackageResponse}
 */
proto.admin.Stats.prototype.addTotalSubscriptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.subscription.SubscribedPackageResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.clearTotalSubscriptionsList = function() {
  return this.setTotalSubscriptionsList([]);
};


/**
 * optional FeatureIncomeResponse income_from_subscriptions = 5;
 * @return {?proto.admin.FeatureIncomeResponse}
 */
proto.admin.Stats.prototype.getIncomeFromSubscriptions = function() {
  return /** @type{?proto.admin.FeatureIncomeResponse} */ (
    jspb.Message.getWrapperField(this, proto.admin.FeatureIncomeResponse, 5));
};


/**
 * @param {?proto.admin.FeatureIncomeResponse|undefined} value
 * @return {!proto.admin.Stats} returns this
*/
proto.admin.Stats.prototype.setIncomeFromSubscriptions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.clearIncomeFromSubscriptions = function() {
  return this.setIncomeFromSubscriptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.Stats.prototype.hasIncomeFromSubscriptions = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FeatureIncomeResponse income_from_car_rentals = 6;
 * @return {?proto.admin.FeatureIncomeResponse}
 */
proto.admin.Stats.prototype.getIncomeFromCarRentals = function() {
  return /** @type{?proto.admin.FeatureIncomeResponse} */ (
    jspb.Message.getWrapperField(this, proto.admin.FeatureIncomeResponse, 6));
};


/**
 * @param {?proto.admin.FeatureIncomeResponse|undefined} value
 * @return {!proto.admin.Stats} returns this
*/
proto.admin.Stats.prototype.setIncomeFromCarRentals = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.clearIncomeFromCarRentals = function() {
  return this.setIncomeFromCarRentals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.Stats.prototype.hasIncomeFromCarRentals = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FeatureIncomeResponse delivery_fees = 7;
 * @return {?proto.admin.FeatureIncomeResponse}
 */
proto.admin.Stats.prototype.getDeliveryFees = function() {
  return /** @type{?proto.admin.FeatureIncomeResponse} */ (
    jspb.Message.getWrapperField(this, proto.admin.FeatureIncomeResponse, 7));
};


/**
 * @param {?proto.admin.FeatureIncomeResponse|undefined} value
 * @return {!proto.admin.Stats} returns this
*/
proto.admin.Stats.prototype.setDeliveryFees = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.clearDeliveryFees = function() {
  return this.setDeliveryFees(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.admin.Stats.prototype.hasDeliveryFees = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string currency = 9;
 * @return {string}
 */
proto.admin.Stats.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.admin.Stats} returns this
 */
proto.admin.Stats.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.admin.FeatureIncomeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.admin.FeatureIncomeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.admin.FeatureIncomeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.FeatureIncomeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    today: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    yesterday: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    lastWeek: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    difference: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.admin.FeatureIncomeResponse}
 */
proto.admin.FeatureIncomeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.admin.FeatureIncomeResponse;
  return proto.admin.FeatureIncomeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.admin.FeatureIncomeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.admin.FeatureIncomeResponse}
 */
proto.admin.FeatureIncomeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setToday(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setYesterday(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLastWeek(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDifference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.admin.FeatureIncomeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.admin.FeatureIncomeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.admin.FeatureIncomeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.admin.FeatureIncomeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToday();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getYesterday();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLastWeek();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDifference();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional float today = 1;
 * @return {number}
 */
proto.admin.FeatureIncomeResponse.prototype.getToday = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.admin.FeatureIncomeResponse} returns this
 */
proto.admin.FeatureIncomeResponse.prototype.setToday = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float yesterday = 2;
 * @return {number}
 */
proto.admin.FeatureIncomeResponse.prototype.getYesterday = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.admin.FeatureIncomeResponse} returns this
 */
proto.admin.FeatureIncomeResponse.prototype.setYesterday = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float last_week = 3;
 * @return {number}
 */
proto.admin.FeatureIncomeResponse.prototype.getLastWeek = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.admin.FeatureIncomeResponse} returns this
 */
proto.admin.FeatureIncomeResponse.prototype.setLastWeek = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double difference = 4;
 * @return {number}
 */
proto.admin.FeatureIncomeResponse.prototype.getDifference = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.admin.FeatureIncomeResponse} returns this
 */
proto.admin.FeatureIncomeResponse.prototype.setDifference = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.admin.AdminType = {
  ADMIN_TYPE_SUPER: 0,
  ADMIN_TYPE_NORMAL: 1
};

goog.object.extend(exports, proto.admin);
